diff --git a/Makefile b/Makefile
index 74e454f..6934580 100644
--- a/Makefile
+++ b/Makefile
@@ -194,6 +194,10 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_pingpong\
+	$U/_primes\
+	$U/_find\
+	$U/_xargs\
 
 
 
diff --git a/user/find.c b/user/find.c
new file mode 100644
index 0000000..6b976a0
--- /dev/null
+++ b/user/find.c
@@ -0,0 +1,85 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/fs.h"
+#include "kernel/fcntl.h"
+
+char* format_name(char *path) {
+	char *p;
+	for (p = path + strlen(path); p >= path && *p != '/'; p--);
+	return p + 1;
+}
+
+int open_directory(char *path) {
+	int fd = open(path, O_RDONLY);
+	if (fd < 0) {
+		fprintf(2, "find: cannot open [%s]\n", path);
+	}
+	return fd;
+}
+
+// Read directory entries and handle errors
+int read_directory(int fd, struct dirent *de) {
+	return read(fd, de, sizeof(*de)) == sizeof(*de);
+}
+
+// Check if the entry is the current or parent directory
+int is_current_or_parent_dir(const char *name) {
+	return !strcmp(name, ".") || !strcmp(name, "..");
+}
+
+// Recursively find the target name in the directory
+void find(char *path, char *target_name) {
+	char buf[512], *p;
+	struct dirent de;
+	struct stat st;
+	int fd = open_directory(path);
+	
+	if (fd < 0) return;
+	if (fstat(fd, &st) < 0) {
+		fprintf(2, "find: cannot stat %s\n", path);
+		close(fd);
+		return;
+	}
+
+	if (st.type == T_FILE && !strcmp(format_name(path), target_name)) {
+		printf("%s\n", path);
+		close(fd);
+		return;
+	} 
+	
+	if (st.type != T_DIR) {
+		close(fd);
+		return;
+	}
+	
+	if (strlen(path) + DIRSIZ + 2 > sizeof(buf)) {
+		fprintf(2, "find: path too long\n");
+		close(fd);
+		return;
+	}
+	
+	strcpy(buf, path);
+	p = buf + strlen(buf);
+	*p++ = '/';
+
+	while (read_directory(fd, &de)) {
+		if (de.inum == 0 || is_current_or_parent_dir(de.name)) continue;
+		
+		memmove(p, de.name, DIRSIZ);
+		p[DIRSIZ] = 0;
+		
+		find(buf, target_name);
+	}
+	close(fd);
+}
+
+int main(int argc, char *argv[]) {
+	if (argc < 3) {
+		fprintf(2, "usage: find path filename\n");
+		exit(1);
+	}
+
+	find(argv[1], argv[2]);
+	exit(0);
+}
diff --git a/user/pingpong.c b/user/pingpong.c
new file mode 100644
index 0000000..eee2ec6
--- /dev/null
+++ b/user/pingpong.c
@@ -0,0 +1,50 @@
+#include "kernel/types.h"  
+#include "kernel/stat.h"   
+#include "user/user.h"     // Thư viện hàm hệ thống người dùng
+
+int main(int argc, char *argv[]) {
+    int p1[2], p2[2];  // Two pipes: p1 for parent-to-child, p2 for child-to-parent
+    char byte = 'x';   // Byte to send
+
+    // Create both pipes
+    pipe(p1);
+    pipe(p2);
+
+    int pid_t = fork();
+
+    if (pid_t == 0) {  // Child process
+        // Close unused ends
+        close(p1[1]);  // Close write end of p1 (parent-to-child pipe)
+        close(p2[0]);  // Close read end of p2 (child-to-parent pipe)
+
+        // Read from p1 (parent-to-child pipe)
+        read(p1[0], &byte, 1);
+        close(p1[0]);  // Close read end after reading
+
+        // Print received message
+        printf("%d: received ping\n", getpid());
+
+        // Write response to p2 (child-to-parent pipe)
+        write(p2[1], &byte, 1);
+        close(p2[1]);  // Close write end after writing
+
+        exit(0);  // End child process
+    } else {  // Parent process
+        // Close unused ends
+        close(p1[0]);  // Close read end of p1
+        close(p2[1]);  // Close write end of p2
+
+        // Send byte to child through p1
+        write(p1[1], &byte, 1);
+        close(p1[1]);  // Close write end after writing
+
+        // Wait for response from child through p2
+        read(p2[0], &byte, 1);
+        close(p2[0]);  // Close read end after reading
+
+        // Print received message
+        printf("%d: received pong\n", getpid());
+
+        exit(0);  // End parent process
+    }
+}
diff --git a/user/primes.c b/user/primes.c
new file mode 100644
index 0000000..bb9bc79
--- /dev/null
+++ b/user/primes.c
@@ -0,0 +1,68 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+#define MAX 280           // Định nghĩa MAX là 280
+#define FIRST_SNT 2       // Định nghĩa FIRST_SNT là 2 (2->280)
+
+// Hàm tạo số tự nhiên từ FIRST_SNT đến MAX
+int TaoSTN() 
+{ 
+    int tube[2]; 
+    pipe(tube); // Tạo pipe (1 ghi, 0 đọc)
+
+    if (fork() == 0) 
+    { // Nếu là tiến trình con (tạo bản sao tiến trình cha)
+        for (int i = FIRST_SNT; i <= MAX; i++) 
+        {
+            write(tube[1], &i, sizeof(int)); // Ghi số vào pipe
+        }
+        close(tube[1]); // Đóng đầu ghi sau khi gửi xong
+        exit(0); // Kết thúc tiến trình con
+    }
+
+    close(tube[1]); // Đóng đầu ghi trong tiến trình cha
+    return tube[0]; // Trả về đầu đọc của pipe
+}
+
+// Hàm lọc số nguyên tố
+int LocSNT(int input, int SNT) 
+{
+    int temp; // biến tạm thời
+    int tube[2]; // (1 ghi, 0 đọc)
+    pipe(tube); // Tạo pipe mới cho mỗi lần lọc
+
+    if (fork() == 0) 
+    { // Nếu là tiến trình con
+        // Đọc số từ input và ghi vào temp để so sánh với SNT
+        while (read(input, &temp, sizeof(int)) > 0) 
+        {
+            if (temp % SNT != 0 || temp == SNT) 
+            { // Kiểm tra xem số có chia hết cho SNT không
+                write(tube[1], &temp, sizeof(int)); // Nếu không chia hết, ghi vào pipe
+            }
+        }
+        close(tube[1]); // Đóng đầu ghi trong tiến trình con
+        exit(0); // Kết thúc tiến trình con
+    }
+
+    close(input); // Đóng đầu đọc của pipe hiện tại trong tiến trình cha
+    close(tube[1]); // Đóng đầu ghi mới trong tiến trình cha
+    return tube[0]; // Trả về đầu đọc của pipe mới
+}
+
+int main()
+{
+    int SNT; // Khai báo biến SNT để lưu số nguyên tố
+    int input = TaoSTN(); // Gọi hàm tạo dãy số từ 2 đến MAX
+
+    // Đọc số nguyên từ pipe và lọc
+    while (read(input, &SNT, sizeof(int)) > 0) 
+    {
+        printf("prime %d\n", SNT); // In số nguyên tố
+        input = LocSNT(input, SNT); // Lọc các số chia hết cho SNT
+    }
+    
+    close(input); // Đóng đầu đọc của pipe cuối cùng
+    exit(0); // Kết thúc chương trình
+}
diff --git a/user/xargs.c b/user/xargs.c
new file mode 100644
index 0000000..61512fc
--- /dev/null
+++ b/user/xargs.c
@@ -0,0 +1,52 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/param.h"
+
+int main(int argc, char *argv[]) {
+    if (argc < 2) {
+        printf("Usage: xargs command [args...]\n");
+        exit(1);
+    }
+
+    char *args[MAXARG];
+    for (int i = 1; i < argc; i++) {
+        args[i - 1] = argv[i];  // Bỏ qua argv[0] để args[0] chứa lệnh chính
+    }
+
+    char input[500];
+    int pos = argc - 1;
+
+    while (1) {
+        int n = 0;
+        while (read(0, &input[n], 1) == 1) {
+            if (input[n] == '\n') {
+                input[n] = '\0';  // Đổi '\n' thành '\0' để kết thúc chuỗi
+                args[pos] = input; // Đặt dòng đầu vào làm tham số cuối của lệnh
+                args[pos + 1] = 0; // Kết thúc danh sách đối số
+
+                int child = fork();
+                if (child < 0) {
+                    printf("Cannot create process\n");
+                    exit(1);
+                } else if (child == 0) {
+                    exec(args[0], args);  // Thực thi lệnh với đối số
+                    printf("Exec failed\n");
+                    exit(1);
+                } else {
+                    wait(0); // Chờ tiến trình con hoàn thành
+                }
+                break;
+            }
+            n++;
+            if (n == 500) {
+                printf("Command out of range\n");
+                exit(1);
+            }
+        }
+
+        if (n == 0) break;  // Kết thúc nếu không đọc được gì từ stdin
+    }
+
+    exit(0);
+}
